#!/bin/sh

echo '
 ____  _         _          ____                   _    
|  _ \(_) __ _  | |_ ___   / ___| _ __   __ _ _ __| | __
| |_) | |/ _` | | __/ _ \  \___ \|  _ \ / _` |  __| |/ /
|  __/| | (_| | | || (_) |  ___) | |_) | (_| | |  |   < 
|_|   |_|\__, |  \__\___/  |____/| .__/ \__,_|_|  |_|\_\
         |___/                   |_|                    
'

# some definitions
TRUE=0
FALSE=1

local=$TRUE # will be set by isLocalMode function below

function isLocalMode {

    short_master="-m"
    long_master="--master"

    pos=1 # start with 1 so it points to element after $i in the array

    args=("$@") # store the arguments in the args array - just for convenience

    for i in "$@" # iterate over arguments
    do
        if [ "$i" == "$short_master" ] || [ "$i" == "$long_master" ]; then # if we found a master option
            ## convert args[pos] to lower case
            if [[ ${args[$pos],,} == local* ]]; then # check the next elment for its content
                #echo "found local mode"
                local=$TRUE
            else
                #echo "cluster mode"
                local=$FALSE
            fi
            # we found what we needed - stop the loop
            break
        fi

        ((pos += 1))

    done
}

## search for the master option
isLocalMode $*

CP=$PIG_LIB

if [ "$local" == "$FALSE" ]; then
    if [ -z "$YARN_CONF_DIR" ]; then
        echo "WARNING: YARN_CONF_DIR is not set. Submitting to a remote cluster will probably fail."
    else
        CP=$YARN_CONF_DIR:$CP
    fi
fi


# TODO: we should find our jar file the same way we do for spark
PIG_LIB=`dirname $0`/../target/scala-2.11/PigCompiler.jar

# the directory to include in classpath to enable backends
# this should actually be set by the user using external variables
BACKEND_DIR=`dirname $0`/../sparklib/target/scala-2.11/*

if [ -z "$BACKEND_DIR" ]; then # if BACKEND_DIR does not exist, use our default one
    BACKEND_DIR=`dirname $0`/../backends/*
else
    if [[ "$BACKEND_DIR" == */ ]]; then # if it ends with / it's a directory - include all files using the wildcard *
        BACKEND_DIR=$BACKEND_DIR*
    elif [[ "$BACKEND_DIR" != */\* && "$BACKEND_DIR" != *.jar ]]; then  #if it ends not with / or .jar we assume it's a dir - append /*
        BACKEND_DIR=$BACKEND_DIR/*
    fi
fi

echo "Including backends in $BACKEND_DIR"

CP=$PIG_LIB:$BACKEND_DIR
if [ -z "$SPARK_JAR" ]; then
    echo "Please set SPARK_JAR to your spark-assembly-hadoop jar file"
    exit 1
else
    CP=$SPARK_JAR:$CP
fi

#CP=/Users/kai/Projects/spark-1.3.1/core/target/spark-core_2.11-1.3.1.jar:$PIG_LIB

java -Dscala.usejavacp=true -cp $CP:$PIG_LIB dbis.pig.PigCompiler $*
