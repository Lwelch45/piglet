#!/bin/bash

# some definitions
TRUE=0
FALSE=1
local=$TRUE        # will be set by isLocalMode function
backend=""         # will be set by getBackend function
interactive=false
quiet=false

##############################################################
# printLogo - function to print the logo
# @params: $1 = spark | flink |shell
##############################################################
function printLogo {
    if [ "$1" == "spark" ] || [ "$1" == "sparks" ]; then
	echo '
 ____  _         _          ____                   _
|  _ \(_) __ _  | |_ ___   / ___| _ __   __ _ _ __| | __
| |_) | |/ _` | | __/ _ \  \___ \|  _ \ / _` |  __| |/ /
|  __/| | (_| | | || (_) |  ___) | |_) | (_| | |  |   <
|_|   |_|\__, |  \__\___/  |____/| .__/ \__,_|_|  |_|\_\
         |___/                   |_|
'
    elif [ "$1" == "flink" ] || [ "$1" == "flinks" ]; then
	echo '
 ____  _                  _____ _ _       _
|  _ \(_) __ _      __   |  ___| (_)_ __ | | __
| |_) | |/ _` | ____\ \  | |_  | | |  _ \| |/ /
|  __/| | (_| | ____   ) |  _| | | | | | |   <
|_|   |_|\__, |     /_/  |_|   |_|_|_| |_|_|\_\
         |___/
'
    elif [ "$1" == "shell" ]; then
echo '
 ____  _         ____  _          _ _
|  _ \(_) __ _  / ___|| |__   ___| | |
| |_) | |/ _` | \___ \|  _ \ / _ \ | |
|  __/| | (_| |  ___) | | | |  __/ | |
|_|   |_|\__, | |____/|_| |_|\___|_|_|
         |___/
'
    fi
}

##############################################################
# isLocalMode - check if the option --master local was given
# @params: $@ all parameters
##############################################################
function isLocalMode {

    short_master="-m"
    long_master="--master"

    pos=1 # start with 1 so it points to element after $i in the array

    args=("$@") # store the arguments in the args array - just for convenience

    for i in "$@" # iterate over arguments
    do
        if [ "$i" == "$short_master" ] || [ "$i" == "$long_master" ]; then # if we found a master option
            ## convert args[pos] to lower case
            if [[ ${args[$pos],,} == local* ]]; then # check the next elment for its content
                #echo "found local mode"
                local=$TRUE
            else
                #echo "cluster mode"
                local=$FALSE
            fi
            # we found what we needed - stop the loop
            break
        fi

        ((pos += 1))

    done
}

##############################################################
# getBackend - determine the specified backend
# @params: $@ all parameters
##############################################################
function getBackend {
    short_backend="-b"
    long_backend="--backend"

    pos=1 # start with 1 so it points to element after $i in the array

    args=("$@") # store the arguments in the args array - just for convenience

    for i in "$@" # iterate over arguments
    do
        if [ "$i" == "$short_backend" ] || [ "$i" == "$long_backend" ]; then # if we found a backend option
            # we found what we needed - stop the loop
	    backend=${args[$pos]}
            break
        fi

        ((pos += 1))

    done
}

##############################################################
# checkBackendJar - check if the jar file for the backend
#                    is defined and add it to CLASSPATH
##############################################################
function checkBackendJar {

    if [ "$backend" == "spark" ] || [ "$backend" == "sparks" ]; then
	if [ -z "$SPARK_JAR" ]; then
	    echo "Please set SPARK_JAR to your spark-assembly-hadoop jar file"
	    exit 1
	else
	    CP=$CP:$SPARK_JAR
	fi
    elif [ "$backend" == "flink" ] || [ "$backend" == "flinks" ]; then
	if [ -z "$FLINK_JAR" ]; then
	    echo "Please set FLINK_JAR to your flink-dist jar file (built with scala 2.11)"
	    exit 1
	else
	    CP=$CP:$FLINK_JAR
	fi
    fi
}

##############################################################
# checkInteractiveShell - check if we should invoke the
#                         REPL or the compiler
##############################################################
function checkInteractiveShell {
    short_shell="-i"
    long_shell="--interactive"

    pos=1 # start with 1 so it points to element after $i in the array

    args=("$@") # store the arguments in the args array - just for convenience

    for i in "$@" # iterate over arguments
    do
        if [ "$i" == "$short_shell" ] || [ "$i" == "$long_shell" ]; then # if we found the interactive option
            # we found what we needed - stop the loop
	    interactive=true
            break
        fi

        ((pos += 1))

    done
}


##############################################################
# checkJobManager  - check if the flink JobManager is working or not.
#                    if not the piglet will exit
##############################################################
function checkJobManager {
    if [ "$backend" == "flink" ] || [ "$backend" == "flinks" ]; then
        jobmanager="org.apache.flink.runtime.jobmanager.JobManager"
        pid=` ps aux | grep $jobmanager | grep -v "grep" | awk '{print $2}'`
        if [[ ! -z $pid ]]
        then
            echo -e "\nThe flink job manager is working with PID=$pid. Continue ..."
        else
            echo -e "\nThe flink job manager is not working. Please, run it from the flink bin folder (i.e., start-local). Piglet will exit now ..."
            exit 1
        fi
    fi
}

##############################################################
# isQuietMode  - test if we are allowed to print header
##############################################################
function isQuietMode {
  short_quiet="-q"
  long_quiet="--quiet"

  pos=1 # start with 1 so it points to element after $i in the array

  args=("$@") # store the arguments in the args array - just for convenience

  for i in "$@" # iterate over arguments
  do
      if [ "$i" == "$short_quiet" ] || [ "$i" == "$long_quiet" ]; then # if we found the quiet option
          # we found what we needed - stop the loop
          quiet=true
          break
      fi

      ((pos += 1))

  done
}

##############################################################

## search for the master option
isLocalMode $*

## search for the backend option
getBackend $*

## if no backend was specified we should exit here, but only
# if no --help was given.
if [ "$backend" == "" ] && [[ ! $@ =~ .*--help.* ]] ; then
    echo "No backend specified: please use --backend (spark|flink|...)"
    exit 1
fi

checkInteractiveShell $*
isQuietMode $*

if ! $quiet; then
  if $interactive; then
      printLogo "shell"
  else
      printLogo $backend
  fi
fi

# TODO: we should find our jar file the same way we do for spark
if [ -z "$PIG_LIB" ]; then
    PIG_LIB=`dirname $0`/../target/scala-2.11/piglet.jar
fi

CP=$PIG_LIB:$CLASSPATH

if [ "$local" == "$FALSE" ]; then
    if [ -z "$YARN_CONF_DIR" ]; then
        echo "WARNING: YARN_CONF_DIR is not set. Submitting to a remote cluster will probably fail."
    else
        CP=$YARN_CONF_DIR:$CP
    fi
fi


if [ -z "$BACKEND_DIR" ]; then # if BACKEND_DIR does not exist, use our default one
    # sparks and spark are supported by spark, flinks and flink by flink
    BACKEND_DIR=`dirname $0`/../${backend%s}lib/target/scala-2.11/*
#    echo "No backend direcory (BACKEND_DIR) specified, using the default directory '$BACKEND_DIR'."
else
    if [[ "$BACKEND_DIR" == */ ]]; then # if it ends with / it's a directory - include all files using the wildcard *
        BACKEND_DIR=$BACKEND_DIR*
    elif [[ "$BACKEND_DIR" != */\* && "$BACKEND_DIR" != *.jar ]]; then  #if it ends not with /* or .jar we assume it's a dir - append /*
        BACKEND_DIR=$BACKEND_DIR/*
    fi
fi

CP=$BACKEND_DIR:$CP
checkBackendJar
checkJobManager

if $interactive; then
    java -Dscala.usejavacp=true -cp $CP dbis.piglet.PigletREPL --backend_dir `dirname $0`/.. $*
else
    java -Dscala.usejavacp=true -cp $CP dbis.piglet.Piglet --backend_dir `dirname $0`/.. $*
fi
